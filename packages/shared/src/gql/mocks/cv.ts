import { Types } from 'mongoose'
import { CV, CVPreview } from '../../schema'
import { sectionTemplates } from './sectionTemplates'

const fieldsWithId = sectionTemplates[0].fields.map((secFlds) =>
  secFlds.map((flds) =>
    flds.map((fld) => ({ ...fld, _id: Types.ObjectId().toHexString() }))
  )
)

const cvPreview: CVPreview = {
  urls: [
    {
      base64:
        '',
    },
  ],
}

const cv: CV = {
  _id: Types.ObjectId().toHexString(),
  sections: [
    {
      ...sectionTemplates[0],
      fields: fieldsWithId,
    },
  ],
  preview: cvPreview,
  toTemplate() {
    return this.sections.reduce((acc, section) => {
      acc[section.name] = section.toTemplate()

      return acc
    }, {})
  },
}

const cvs: Partial<CV>[] = [
  {
    _id: Types.ObjectId().toHexString(),
    preview: cvPreview,
  },
]

export { cvPreview, cv, cvs }
